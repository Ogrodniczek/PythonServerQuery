'''Class for Teamspeak3 ServerQuery access'''
import telnetlib


def query_decorator(method):
    '''Decorator used for changing spaces to '\s' inside
    strings, requred by ServerQuery'''
    def wrapper(self, *args, **kw):
        new = []
        for arg in args:
            new.append(str(arg).replace(' ', '\s'))
        return(method(self, *new, **kw))

    return(wrapper)

def parse_list(sq_string):
    '''Function which is parsing raw lists generated by
    ServerQuery. It's returning list of dictionaries'''
    records = sq_string.split('|')
    end_list = []
    for record in records:
        parameters = record.split(' ')
        record_parsed = {}
        for parameter in parameters:
            try:
                param, value = parameter.split('=', 1)
            except ValueError:
                pass
            record_parsed[param] = value
        end_list.append(record_parsed)
    return(end_list)

class ServerQuery():
    '''ServerQuery class'''

    client_list = []
    channel_list = []
    ban_list = []
    group_list = []

    def __init__(self):
        self.tel = telnetlib.Telnet('localhost', '10011')

    def sender(self, message, expected='error id=0 msg=ok\n\r'):
        '''Most important method. It's sending messages to telnet
        and recieving expected value, also returning everything with
        the expected value. If fails - returning empty string
        '''
        self.tel.write(''.join([message, '\n']).encode())
        self.read_console_until()

    def read_console_until(self, expected='error id=0 msg=ok\n\r'):
        response = self.tel.read_until(expected, 1)
        if expected in response:
            return(response)
        else:
            return ''

    def check_if_any_message_on_console(self):
        return self.read_console_until('\n\r')

    @query_decorator
    def login(self, client_login_name='SA', client_login_password='8JPwQQwM'):
        self.sender('login client_login_name=' + client_login_name + ' client_login_password=' + client_login_password, 'specific_command')

    def set_server(self, sid='1'):
        self.sender('use sid='+ sid)

    @query_decorator
    def changename(self, clid, newname):
        self.sender('clientupdate clid=' + clid + ' client_nickname=' + newname)

    @query_decorator
    def get_from_client_list(self, parameter, value, what):
        for user in self.client_list:
            if user[parameter] == value:
                return(user[what])

    @query_decorator
    def get_from_channel_list(self, parameter, value, what):
        for channel in self.channel_list:
            if channel[parameter] == value:
                return(channel[what])

    def update_clientlist(self):
        sq_string = self.sender('clientlist')
        self.client_list = parse_list(sq_string)
        return(self.client_list)

    def update_banlist(self):
        sq_string = self.sender('banlist')
        self.ban_list = parse_list(sq_string)
        return(self.ban_list)

    def update_channellist(self):
        sq_string = self.sender('channellist')
        self.channel_list = parse_list(sq_string)
        return(self.channel_list)

    def update_grouplist(self):
        sq_string = self.sender('servergrouplist')
        self.group_list = parse_list(sq_string)
        return(self.group_list)

    @query_decorator
    def servernotifyregister(self):
        self.sender('servernotifyregister event=textprivate')


    @query_decorator
    def poke(self, clid, message):
        self.sender('clientpoke msg='+ message + ' clid=' + clid)

    @query_decorator
    def ban(self, clid, seconds, message):
        self.sender('banclient clid=' + clid + ' time' + seconds + ' banreason='+ message)

    @query_decorator
    def clientmove(self, clid, cid):
        self.sender('clientmove cid=' + cid + ' clid=' + clid)

    @query_decorator
    def clientkick(self, clid, reasonid, msg):
        self.sender('clientkick clid=' + clid + ' reasonid=' + reasonid + ' reasonmsg=' + msg)

    @query_decorator
    def banner(self, bannerlink):
        self.sender('serveredit virtualserver_hostbanner_gfx_url=' + bannerlink)

    @query_decorator
    def sendtextmessage(self, clid, msg):
        self.sender('sendtextmessage targetmode=1  target=' + clid + ' msg=' + msg)

    @query_decorator
    def welcomemessage(self, msg):
        self.sender('serveredit virtualserver_welcomemessage=' + msg)

    @query_decorator
    def changechannelname(self, cid, newname):
        self.sender('channeledit cid=' + cid + ' channel_name=' + newname)

    @query_decorator
    def offlinemessage(self, cluid, subject, message):
        self.sender('message add cluid=' + cluid + ' subject=' + subject + ' message=' + message)

    @query_decorator
    def gmmessage(self, message):
        self.sender('gm msg=' + message)

    def addusertogroup(self, cldbid, sgid):
        self.sender('servergroupaddclient sgid=' + sgid + ' cldbid=' + cldbid)

    def removeuserfromgroup(self, cldbid, sgid):
        self.sender('servergroupdelclient sgid=' + sgid + ' cldbid=' + cldbid)

    def serverreconnect(self):
        self.login()
        self.set_server()

    def quit(self):
        self.sender('quit')

